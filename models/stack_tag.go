// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StackTag is an object representing the database table.
type StackTag struct {
	ID        uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	StackID   uint64    `boil:"stack_id" json:"stack_id" toml:"stack_id" yaml:"stack_id"`
	TagID     uint64    `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *stackTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stackTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StackTagColumns = struct {
	ID        string
	StackID   string
	TagID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	StackID:   "stack_id",
	TagID:     "tag_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var StackTagWhere = struct {
	ID        whereHelperuint64
	StackID   whereHelperuint64
	TagID     whereHelperuint64
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperuint64{field: "`stack_tag`.`id`"},
	StackID:   whereHelperuint64{field: "`stack_tag`.`stack_id`"},
	TagID:     whereHelperuint64{field: "`stack_tag`.`tag_id`"},
	CreatedAt: whereHelpernull_Time{field: "`stack_tag`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`stack_tag`.`updated_at`"},
}

// StackTagRels is where relationship names are stored.
var StackTagRels = struct {
	Stack string
	Tag   string
}{
	Stack: "Stack",
	Tag:   "Tag",
}

// stackTagR is where relationships are stored.
type stackTagR struct {
	Stack *Stack `boil:"Stack" json:"Stack" toml:"Stack" yaml:"Stack"`
	Tag   *Tag   `boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
}

// NewStruct creates a new relationship struct
func (*stackTagR) NewStruct() *stackTagR {
	return &stackTagR{}
}

// stackTagL is where Load methods for each relationship are stored.
type stackTagL struct{}

var (
	stackTagAllColumns            = []string{"id", "stack_id", "tag_id", "created_at", "updated_at"}
	stackTagColumnsWithoutDefault = []string{"stack_id", "tag_id", "created_at", "updated_at"}
	stackTagColumnsWithDefault    = []string{"id"}
	stackTagPrimaryKeyColumns     = []string{"id"}
)

type (
	// StackTagSlice is an alias for a slice of pointers to StackTag.
	// This should generally be used opposed to []StackTag.
	StackTagSlice []*StackTag
	// StackTagHook is the signature for custom StackTag hook methods
	StackTagHook func(boil.Executor, *StackTag) error

	stackTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stackTagType                 = reflect.TypeOf(&StackTag{})
	stackTagMapping              = queries.MakeStructMapping(stackTagType)
	stackTagPrimaryKeyMapping, _ = queries.BindMapping(stackTagType, stackTagMapping, stackTagPrimaryKeyColumns)
	stackTagInsertCacheMut       sync.RWMutex
	stackTagInsertCache          = make(map[string]insertCache)
	stackTagUpdateCacheMut       sync.RWMutex
	stackTagUpdateCache          = make(map[string]updateCache)
	stackTagUpsertCacheMut       sync.RWMutex
	stackTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stackTagBeforeInsertHooks []StackTagHook
var stackTagBeforeUpdateHooks []StackTagHook
var stackTagBeforeDeleteHooks []StackTagHook
var stackTagBeforeUpsertHooks []StackTagHook

var stackTagAfterInsertHooks []StackTagHook
var stackTagAfterSelectHooks []StackTagHook
var stackTagAfterUpdateHooks []StackTagHook
var stackTagAfterDeleteHooks []StackTagHook
var stackTagAfterUpsertHooks []StackTagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StackTag) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StackTag) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StackTag) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StackTag) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StackTag) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StackTag) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StackTag) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StackTag) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StackTag) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stackTagAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStackTagHook registers your hook function for all future operations.
func AddStackTagHook(hookPoint boil.HookPoint, stackTagHook StackTagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stackTagBeforeInsertHooks = append(stackTagBeforeInsertHooks, stackTagHook)
	case boil.BeforeUpdateHook:
		stackTagBeforeUpdateHooks = append(stackTagBeforeUpdateHooks, stackTagHook)
	case boil.BeforeDeleteHook:
		stackTagBeforeDeleteHooks = append(stackTagBeforeDeleteHooks, stackTagHook)
	case boil.BeforeUpsertHook:
		stackTagBeforeUpsertHooks = append(stackTagBeforeUpsertHooks, stackTagHook)
	case boil.AfterInsertHook:
		stackTagAfterInsertHooks = append(stackTagAfterInsertHooks, stackTagHook)
	case boil.AfterSelectHook:
		stackTagAfterSelectHooks = append(stackTagAfterSelectHooks, stackTagHook)
	case boil.AfterUpdateHook:
		stackTagAfterUpdateHooks = append(stackTagAfterUpdateHooks, stackTagHook)
	case boil.AfterDeleteHook:
		stackTagAfterDeleteHooks = append(stackTagAfterDeleteHooks, stackTagHook)
	case boil.AfterUpsertHook:
		stackTagAfterUpsertHooks = append(stackTagAfterUpsertHooks, stackTagHook)
	}
}

// OneG returns a single stackTag record from the query using the global executor.
func (q stackTagQuery) OneG() (*StackTag, error) {
	return q.One(boil.GetDB())
}

// One returns a single stackTag record from the query.
func (q stackTagQuery) One(exec boil.Executor) (*StackTag, error) {
	o := &StackTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stack_tag")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all StackTag records from the query using the global executor.
func (q stackTagQuery) AllG() (StackTagSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all StackTag records from the query.
func (q stackTagQuery) All(exec boil.Executor) (StackTagSlice, error) {
	var o []*StackTag

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StackTag slice")
	}

	if len(stackTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all StackTag records in the query, and panics on error.
func (q stackTagQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all StackTag records in the query.
func (q stackTagQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stack_tag rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q stackTagQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q stackTagQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stack_tag exists")
	}

	return count > 0, nil
}

// Stack pointed to by the foreign key.
func (o *StackTag) Stack(mods ...qm.QueryMod) stackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.StackID),
	}

	queryMods = append(queryMods, mods...)

	query := Stacks(queryMods...)
	queries.SetFrom(query.Query, "`stack`")

	return query
}

// Tag pointed to by the foreign key.
func (o *StackTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "`tag`")

	return query
}

// LoadStack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stackTagL) LoadStack(e boil.Executor, singular bool, maybeStackTag interface{}, mods queries.Applicator) error {
	var slice []*StackTag
	var object *StackTag

	if singular {
		object = maybeStackTag.(*StackTag)
	} else {
		slice = *maybeStackTag.(*[]*StackTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stackTagR{}
		}
		args = append(args, object.StackID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stackTagR{}
			}

			for _, a := range args {
				if a == obj.StackID {
					continue Outer
				}
			}

			args = append(args, obj.StackID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stack`),
		qm.WhereIn(`stack.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Stack")
	}

	var resultSlice []*Stack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Stack")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stack")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stack")
	}

	if len(stackTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Stack = foreign
		if foreign.R == nil {
			foreign.R = &stackR{}
		}
		foreign.R.StackTags = append(foreign.R.StackTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StackID == foreign.ID {
				local.R.Stack = foreign
				if foreign.R == nil {
					foreign.R = &stackR{}
				}
				foreign.R.StackTags = append(foreign.R.StackTags, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stackTagL) LoadTag(e boil.Executor, singular bool, maybeStackTag interface{}, mods queries.Applicator) error {
	var slice []*StackTag
	var object *StackTag

	if singular {
		object = maybeStackTag.(*StackTag)
	} else {
		slice = *maybeStackTag.(*[]*StackTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stackTagR{}
		}
		args = append(args, object.TagID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stackTagR{}
			}

			for _, a := range args {
				if a == obj.TagID {
					continue Outer
				}
			}

			args = append(args, obj.TagID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tag`),
		qm.WhereIn(`tag.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if len(stackTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.StackTags = append(foreign.R.StackTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.StackTags = append(foreign.R.StackTags, local)
				break
			}
		}
	}

	return nil
}

// SetStackG of the stackTag to the related item.
// Sets o.R.Stack to related.
// Adds o to related.R.StackTags.
// Uses the global database handle.
func (o *StackTag) SetStackG(insert bool, related *Stack) error {
	return o.SetStack(boil.GetDB(), insert, related)
}

// SetStack of the stackTag to the related item.
// Sets o.R.Stack to related.
// Adds o to related.R.StackTags.
func (o *StackTag) SetStack(exec boil.Executor, insert bool, related *Stack) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `stack_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"stack_id"}),
		strmangle.WhereClause("`", "`", 0, stackTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StackID = related.ID
	if o.R == nil {
		o.R = &stackTagR{
			Stack: related,
		}
	} else {
		o.R.Stack = related
	}

	if related.R == nil {
		related.R = &stackR{
			StackTags: StackTagSlice{o},
		}
	} else {
		related.R.StackTags = append(related.R.StackTags, o)
	}

	return nil
}

// SetTagG of the stackTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.StackTags.
// Uses the global database handle.
func (o *StackTag) SetTagG(insert bool, related *Tag) error {
	return o.SetTag(boil.GetDB(), insert, related)
}

// SetTag of the stackTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.StackTags.
func (o *StackTag) SetTag(exec boil.Executor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `stack_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
		strmangle.WhereClause("`", "`", 0, stackTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &stackTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			StackTags: StackTagSlice{o},
		}
	} else {
		related.R.StackTags = append(related.R.StackTags, o)
	}

	return nil
}

// StackTags retrieves all the records using an executor.
func StackTags(mods ...qm.QueryMod) stackTagQuery {
	mods = append(mods, qm.From("`stack_tag`"))
	return stackTagQuery{NewQuery(mods...)}
}

// FindStackTagG retrieves a single record by ID.
func FindStackTagG(iD uint64, selectCols ...string) (*StackTag, error) {
	return FindStackTag(boil.GetDB(), iD, selectCols...)
}

// FindStackTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStackTag(exec boil.Executor, iD uint64, selectCols ...string) (*StackTag, error) {
	stackTagObj := &StackTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `stack_tag` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, stackTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stack_tag")
	}

	return stackTagObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *StackTag) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StackTag) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stack_tag provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stackTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stackTagInsertCacheMut.RLock()
	cache, cached := stackTagInsertCache[key]
	stackTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stackTagAllColumns,
			stackTagColumnsWithDefault,
			stackTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stackTagType, stackTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stackTagType, stackTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `stack_tag` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `stack_tag` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `stack_tag` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, stackTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stack_tag")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == stackTagMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for stack_tag")
	}

CacheNoHooks:
	if !cached {
		stackTagInsertCacheMut.Lock()
		stackTagInsertCache[key] = cache
		stackTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single StackTag record using the global executor.
// See Update for more documentation.
func (o *StackTag) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the StackTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StackTag) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stackTagUpdateCacheMut.RLock()
	cache, cached := stackTagUpdateCache[key]
	stackTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stackTagAllColumns,
			stackTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stack_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `stack_tag` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, stackTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stackTagType, stackTagMapping, append(wl, stackTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stack_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stack_tag")
	}

	if !cached {
		stackTagUpdateCacheMut.Lock()
		stackTagUpdateCache[key] = cache
		stackTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q stackTagQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q stackTagQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stack_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stack_tag")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StackTagSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StackTagSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stackTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `stack_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stackTagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stackTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stackTag")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *StackTag) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLStackTagUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StackTag) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stack_tag provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stackTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStackTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stackTagUpsertCacheMut.RLock()
	cache, cached := stackTagUpsertCache[key]
	stackTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stackTagAllColumns,
			stackTagColumnsWithDefault,
			stackTagColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stackTagAllColumns,
			stackTagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert stack_tag, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`stack_tag`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `stack_tag` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(stackTagType, stackTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stackTagType, stackTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for stack_tag")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == stackTagMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(stackTagType, stackTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for stack_tag")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for stack_tag")
	}

CacheNoHooks:
	if !cached {
		stackTagUpsertCacheMut.Lock()
		stackTagUpsertCache[key] = cache
		stackTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single StackTag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *StackTag) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single StackTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StackTag) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StackTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stackTagPrimaryKeyMapping)
	sql := "DELETE FROM `stack_tag` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stack_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stack_tag")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q stackTagQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q stackTagQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stackTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stack_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stack_tag")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StackTagSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StackTagSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stackTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stackTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `stack_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stackTagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stackTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stack_tag")
	}

	if len(stackTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *StackTag) ReloadG() error {
	if o == nil {
		return errors.New("models: no StackTag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StackTag) Reload(exec boil.Executor) error {
	ret, err := FindStackTag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StackTagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty StackTagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StackTagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StackTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stackTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `stack_tag`.* FROM `stack_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stackTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StackTagSlice")
	}

	*o = slice

	return nil
}

// StackTagExistsG checks if the StackTag row exists.
func StackTagExistsG(iD uint64) (bool, error) {
	return StackTagExists(boil.GetDB(), iD)
}

// StackTagExists checks if the StackTag row exists.
func StackTagExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `stack_tag` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stack_tag exists")
	}

	return exists, nil
}
