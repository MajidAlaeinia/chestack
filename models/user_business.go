// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBusiness is an object representing the database table.
type UserBusiness struct {
	ID         uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     uint64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	BusinessID uint64    `boil:"business_id" json:"business_id" toml:"business_id" yaml:"business_id"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *userBusinessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBusinessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBusinessColumns = struct {
	ID         string
	UserID     string
	BusinessID string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	UserID:     "user_id",
	BusinessID: "business_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var UserBusinessWhere = struct {
	ID         whereHelperuint64
	UserID     whereHelperuint64
	BusinessID whereHelperuint64
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperuint64{field: "`user_business`.`id`"},
	UserID:     whereHelperuint64{field: "`user_business`.`user_id`"},
	BusinessID: whereHelperuint64{field: "`user_business`.`business_id`"},
	CreatedAt:  whereHelpernull_Time{field: "`user_business`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`user_business`.`updated_at`"},
}

// UserBusinessRels is where relationship names are stored.
var UserBusinessRels = struct {
	Business string
	User     string
}{
	Business: "Business",
	User:     "User",
}

// userBusinessR is where relationships are stored.
type userBusinessR struct {
	Business *Business `boil:"Business" json:"Business" toml:"Business" yaml:"Business"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userBusinessR) NewStruct() *userBusinessR {
	return &userBusinessR{}
}

// userBusinessL is where Load methods for each relationship are stored.
type userBusinessL struct{}

var (
	userBusinessAllColumns            = []string{"id", "user_id", "business_id", "created_at", "updated_at"}
	userBusinessColumnsWithoutDefault = []string{"user_id", "business_id", "created_at", "updated_at"}
	userBusinessColumnsWithDefault    = []string{"id"}
	userBusinessPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserBusinessSlice is an alias for a slice of pointers to UserBusiness.
	// This should generally be used opposed to []UserBusiness.
	UserBusinessSlice []*UserBusiness
	// UserBusinessHook is the signature for custom UserBusiness hook methods
	UserBusinessHook func(boil.Executor, *UserBusiness) error

	userBusinessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBusinessType                 = reflect.TypeOf(&UserBusiness{})
	userBusinessMapping              = queries.MakeStructMapping(userBusinessType)
	userBusinessPrimaryKeyMapping, _ = queries.BindMapping(userBusinessType, userBusinessMapping, userBusinessPrimaryKeyColumns)
	userBusinessInsertCacheMut       sync.RWMutex
	userBusinessInsertCache          = make(map[string]insertCache)
	userBusinessUpdateCacheMut       sync.RWMutex
	userBusinessUpdateCache          = make(map[string]updateCache)
	userBusinessUpsertCacheMut       sync.RWMutex
	userBusinessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBusinessBeforeInsertHooks []UserBusinessHook
var userBusinessBeforeUpdateHooks []UserBusinessHook
var userBusinessBeforeDeleteHooks []UserBusinessHook
var userBusinessBeforeUpsertHooks []UserBusinessHook

var userBusinessAfterInsertHooks []UserBusinessHook
var userBusinessAfterSelectHooks []UserBusinessHook
var userBusinessAfterUpdateHooks []UserBusinessHook
var userBusinessAfterDeleteHooks []UserBusinessHook
var userBusinessAfterUpsertHooks []UserBusinessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserBusiness) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserBusiness) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserBusiness) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserBusiness) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserBusiness) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserBusiness) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserBusiness) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserBusiness) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserBusiness) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBusinessAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserBusinessHook registers your hook function for all future operations.
func AddUserBusinessHook(hookPoint boil.HookPoint, userBusinessHook UserBusinessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userBusinessBeforeInsertHooks = append(userBusinessBeforeInsertHooks, userBusinessHook)
	case boil.BeforeUpdateHook:
		userBusinessBeforeUpdateHooks = append(userBusinessBeforeUpdateHooks, userBusinessHook)
	case boil.BeforeDeleteHook:
		userBusinessBeforeDeleteHooks = append(userBusinessBeforeDeleteHooks, userBusinessHook)
	case boil.BeforeUpsertHook:
		userBusinessBeforeUpsertHooks = append(userBusinessBeforeUpsertHooks, userBusinessHook)
	case boil.AfterInsertHook:
		userBusinessAfterInsertHooks = append(userBusinessAfterInsertHooks, userBusinessHook)
	case boil.AfterSelectHook:
		userBusinessAfterSelectHooks = append(userBusinessAfterSelectHooks, userBusinessHook)
	case boil.AfterUpdateHook:
		userBusinessAfterUpdateHooks = append(userBusinessAfterUpdateHooks, userBusinessHook)
	case boil.AfterDeleteHook:
		userBusinessAfterDeleteHooks = append(userBusinessAfterDeleteHooks, userBusinessHook)
	case boil.AfterUpsertHook:
		userBusinessAfterUpsertHooks = append(userBusinessAfterUpsertHooks, userBusinessHook)
	}
}

// OneG returns a single userBusiness record from the query using the global executor.
func (q userBusinessQuery) OneG() (*UserBusiness, error) {
	return q.One(boil.GetDB())
}

// One returns a single userBusiness record from the query.
func (q userBusinessQuery) One(exec boil.Executor) (*UserBusiness, error) {
	o := &UserBusiness{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_business")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserBusiness records from the query using the global executor.
func (q userBusinessQuery) AllG() (UserBusinessSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserBusiness records from the query.
func (q userBusinessQuery) All(exec boil.Executor) (UserBusinessSlice, error) {
	var o []*UserBusiness

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserBusiness slice")
	}

	if len(userBusinessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserBusiness records in the query, and panics on error.
func (q userBusinessQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserBusiness records in the query.
func (q userBusinessQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_business rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userBusinessQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userBusinessQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_business exists")
	}

	return count > 0, nil
}

// Business pointed to by the foreign key.
func (o *UserBusiness) Business(mods ...qm.QueryMod) businessQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BusinessID),
	}

	queryMods = append(queryMods, mods...)

	query := Businesses(queryMods...)
	queries.SetFrom(query.Query, "`businesses`")

	return query
}

// User pointed to by the foreign key.
func (o *UserBusiness) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadBusiness allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBusinessL) LoadBusiness(e boil.Executor, singular bool, maybeUserBusiness interface{}, mods queries.Applicator) error {
	var slice []*UserBusiness
	var object *UserBusiness

	if singular {
		object = maybeUserBusiness.(*UserBusiness)
	} else {
		slice = *maybeUserBusiness.(*[]*UserBusiness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBusinessR{}
		}
		args = append(args, object.BusinessID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBusinessR{}
			}

			for _, a := range args {
				if a == obj.BusinessID {
					continue Outer
				}
			}

			args = append(args, obj.BusinessID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`businesses`),
		qm.WhereIn(`businesses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Business")
	}

	var resultSlice []*Business
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Business")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for businesses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for businesses")
	}

	if len(userBusinessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Business = foreign
		if foreign.R == nil {
			foreign.R = &businessR{}
		}
		foreign.R.UserBusinesses = append(foreign.R.UserBusinesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessID == foreign.ID {
				local.R.Business = foreign
				if foreign.R == nil {
					foreign.R = &businessR{}
				}
				foreign.R.UserBusinesses = append(foreign.R.UserBusinesses, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBusinessL) LoadUser(e boil.Executor, singular bool, maybeUserBusiness interface{}, mods queries.Applicator) error {
	var slice []*UserBusiness
	var object *UserBusiness

	if singular {
		object = maybeUserBusiness.(*UserBusiness)
	} else {
		slice = *maybeUserBusiness.(*[]*UserBusiness)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBusinessR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBusinessR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userBusinessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserBusinesses = append(foreign.R.UserBusinesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserBusinesses = append(foreign.R.UserBusinesses, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessG of the userBusiness to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.UserBusinesses.
// Uses the global database handle.
func (o *UserBusiness) SetBusinessG(insert bool, related *Business) error {
	return o.SetBusiness(boil.GetDB(), insert, related)
}

// SetBusiness of the userBusiness to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.UserBusinesses.
func (o *UserBusiness) SetBusiness(exec boil.Executor, insert bool, related *Business) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_business` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"business_id"}),
		strmangle.WhereClause("`", "`", 0, userBusinessPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessID = related.ID
	if o.R == nil {
		o.R = &userBusinessR{
			Business: related,
		}
	} else {
		o.R.Business = related
	}

	if related.R == nil {
		related.R = &businessR{
			UserBusinesses: UserBusinessSlice{o},
		}
	} else {
		related.R.UserBusinesses = append(related.R.UserBusinesses, o)
	}

	return nil
}

// SetUserG of the userBusiness to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBusinesses.
// Uses the global database handle.
func (o *UserBusiness) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the userBusiness to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBusinesses.
func (o *UserBusiness) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_business` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userBusinessPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userBusinessR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserBusinesses: UserBusinessSlice{o},
		}
	} else {
		related.R.UserBusinesses = append(related.R.UserBusinesses, o)
	}

	return nil
}

// UserBusinesses retrieves all the records using an executor.
func UserBusinesses(mods ...qm.QueryMod) userBusinessQuery {
	mods = append(mods, qm.From("`user_business`"))
	return userBusinessQuery{NewQuery(mods...)}
}

// FindUserBusinessG retrieves a single record by ID.
func FindUserBusinessG(iD uint64, selectCols ...string) (*UserBusiness, error) {
	return FindUserBusiness(boil.GetDB(), iD, selectCols...)
}

// FindUserBusiness retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBusiness(exec boil.Executor, iD uint64, selectCols ...string) (*UserBusiness, error) {
	userBusinessObj := &UserBusiness{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_business` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userBusinessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_business")
	}

	return userBusinessObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserBusiness) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBusiness) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_business provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBusinessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBusinessInsertCacheMut.RLock()
	cache, cached := userBusinessInsertCache[key]
	userBusinessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBusinessAllColumns,
			userBusinessColumnsWithDefault,
			userBusinessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBusinessType, userBusinessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBusinessType, userBusinessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_business` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_business` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_business` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userBusinessPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_business")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userBusinessMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_business")
	}

CacheNoHooks:
	if !cached {
		userBusinessInsertCacheMut.Lock()
		userBusinessInsertCache[key] = cache
		userBusinessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserBusiness record using the global executor.
// See Update for more documentation.
func (o *UserBusiness) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserBusiness.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBusiness) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userBusinessUpdateCacheMut.RLock()
	cache, cached := userBusinessUpdateCache[key]
	userBusinessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBusinessAllColumns,
			userBusinessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_business, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_business` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userBusinessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBusinessType, userBusinessMapping, append(wl, userBusinessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_business row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_business")
	}

	if !cached {
		userBusinessUpdateCacheMut.Lock()
		userBusinessUpdateCache[key] = cache
		userBusinessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userBusinessQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userBusinessQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_business")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_business")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserBusinessSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBusinessSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBusinessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_business` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userBusinessPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userBusiness slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userBusiness")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserBusiness) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLUserBusinessUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBusiness) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_business provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBusinessColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserBusinessUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBusinessUpsertCacheMut.RLock()
	cache, cached := userBusinessUpsertCache[key]
	userBusinessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userBusinessAllColumns,
			userBusinessColumnsWithDefault,
			userBusinessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userBusinessAllColumns,
			userBusinessPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_business, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_business`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_business` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userBusinessType, userBusinessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBusinessType, userBusinessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_business")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userBusinessMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userBusinessType, userBusinessMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_business")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_business")
	}

CacheNoHooks:
	if !cached {
		userBusinessUpsertCacheMut.Lock()
		userBusinessUpsertCache[key] = cache
		userBusinessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserBusiness record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserBusiness) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserBusiness record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBusiness) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserBusiness provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBusinessPrimaryKeyMapping)
	sql := "DELETE FROM `user_business` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_business")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_business")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userBusinessQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q userBusinessQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userBusinessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_business")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_business")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserBusinessSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBusinessSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBusinessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBusinessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_business` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userBusinessPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userBusiness slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_business")
	}

	if len(userBusinessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserBusiness) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserBusiness provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBusiness) Reload(exec boil.Executor) error {
	ret, err := FindUserBusiness(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBusinessSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserBusinessSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBusinessSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBusinessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBusinessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_business`.* FROM `user_business` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userBusinessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserBusinessSlice")
	}

	*o = slice

	return nil
}

// UserBusinessExistsG checks if the UserBusiness row exists.
func UserBusinessExistsG(iD uint64) (bool, error) {
	return UserBusinessExists(boil.GetDB(), iD)
}

// UserBusinessExists checks if the UserBusiness row exists.
func UserBusinessExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_business` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_business exists")
	}

	return exists, nil
}
