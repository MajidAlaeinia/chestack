// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Business is an object representing the database table.
type Business struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Website   string      `boil:"website" json:"website" toml:"website" yaml:"website"`
	Logo      null.String `boil:"logo" json:"logo,omitempty" toml:"logo" yaml:"logo,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *businessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L businessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusinessColumns = struct {
	ID        string
	Name      string
	Website   string
	Logo      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	Website:   "website",
	Logo:      "logo",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusinessWhere = struct {
	ID        whereHelperuint64
	Name      whereHelperstring
	Website   whereHelperstring
	Logo      whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperuint64{field: "`business`.`id`"},
	Name:      whereHelperstring{field: "`business`.`name`"},
	Website:   whereHelperstring{field: "`business`.`website`"},
	Logo:      whereHelpernull_String{field: "`business`.`logo`"},
	CreatedAt: whereHelpernull_Time{field: "`business`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`business`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`business`.`deleted_at`"},
}

// BusinessRels is where relationship names are stored.
var BusinessRels = struct {
	BusinessStacks string
}{
	BusinessStacks: "BusinessStacks",
}

// businessR is where relationships are stored.
type businessR struct {
	BusinessStacks BusinessStackSlice `boil:"BusinessStacks" json:"BusinessStacks" toml:"BusinessStacks" yaml:"BusinessStacks"`
}

// NewStruct creates a new relationship struct
func (*businessR) NewStruct() *businessR {
	return &businessR{}
}

// businessL is where Load methods for each relationship are stored.
type businessL struct{}

var (
	businessAllColumns            = []string{"id", "name", "website", "logo", "created_at", "updated_at", "deleted_at"}
	businessColumnsWithoutDefault = []string{"name", "website", "logo", "created_at", "updated_at", "deleted_at"}
	businessColumnsWithDefault    = []string{"id"}
	businessPrimaryKeyColumns     = []string{"id"}
)

type (
	// BusinessSlice is an alias for a slice of pointers to Business.
	// This should generally be used opposed to []Business.
	BusinessSlice []*Business
	// BusinessHook is the signature for custom Business hook methods
	BusinessHook func(boil.Executor, *Business) error

	businessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	businessType                 = reflect.TypeOf(&Business{})
	businessMapping              = queries.MakeStructMapping(businessType)
	businessPrimaryKeyMapping, _ = queries.BindMapping(businessType, businessMapping, businessPrimaryKeyColumns)
	businessInsertCacheMut       sync.RWMutex
	businessInsertCache          = make(map[string]insertCache)
	businessUpdateCacheMut       sync.RWMutex
	businessUpdateCache          = make(map[string]updateCache)
	businessUpsertCacheMut       sync.RWMutex
	businessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var businessBeforeInsertHooks []BusinessHook
var businessBeforeUpdateHooks []BusinessHook
var businessBeforeDeleteHooks []BusinessHook
var businessBeforeUpsertHooks []BusinessHook

var businessAfterInsertHooks []BusinessHook
var businessAfterSelectHooks []BusinessHook
var businessAfterUpdateHooks []BusinessHook
var businessAfterDeleteHooks []BusinessHook
var businessAfterUpsertHooks []BusinessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Business) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Business) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Business) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Business) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Business) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Business) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Business) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Business) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Business) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusinessHook registers your hook function for all future operations.
func AddBusinessHook(hookPoint boil.HookPoint, businessHook BusinessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		businessBeforeInsertHooks = append(businessBeforeInsertHooks, businessHook)
	case boil.BeforeUpdateHook:
		businessBeforeUpdateHooks = append(businessBeforeUpdateHooks, businessHook)
	case boil.BeforeDeleteHook:
		businessBeforeDeleteHooks = append(businessBeforeDeleteHooks, businessHook)
	case boil.BeforeUpsertHook:
		businessBeforeUpsertHooks = append(businessBeforeUpsertHooks, businessHook)
	case boil.AfterInsertHook:
		businessAfterInsertHooks = append(businessAfterInsertHooks, businessHook)
	case boil.AfterSelectHook:
		businessAfterSelectHooks = append(businessAfterSelectHooks, businessHook)
	case boil.AfterUpdateHook:
		businessAfterUpdateHooks = append(businessAfterUpdateHooks, businessHook)
	case boil.AfterDeleteHook:
		businessAfterDeleteHooks = append(businessAfterDeleteHooks, businessHook)
	case boil.AfterUpsertHook:
		businessAfterUpsertHooks = append(businessAfterUpsertHooks, businessHook)
	}
}

// OneG returns a single business record from the query using the global executor.
func (q businessQuery) OneG() (*Business, error) {
	return q.One(boil.GetDB())
}

// One returns a single business record from the query.
func (q businessQuery) One(exec boil.Executor) (*Business, error) {
	o := &Business{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for business")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Business records from the query using the global executor.
func (q businessQuery) AllG() (BusinessSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Business records from the query.
func (q businessQuery) All(exec boil.Executor) (BusinessSlice, error) {
	var o []*Business

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Business slice")
	}

	if len(businessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Business records in the query, and panics on error.
func (q businessQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Business records in the query.
func (q businessQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count business rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q businessQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q businessQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if business exists")
	}

	return count > 0, nil
}

// BusinessStacks retrieves all the business_stack's BusinessStacks with an executor.
func (o *Business) BusinessStacks(mods ...qm.QueryMod) businessStackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`business_stack`.`business_id`=?", o.ID),
	)

	query := BusinessStacks(queryMods...)
	queries.SetFrom(query.Query, "`business_stack`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`business_stack`.*"})
	}

	return query
}

// LoadBusinessStacks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (businessL) LoadBusinessStacks(e boil.Executor, singular bool, maybeBusiness interface{}, mods queries.Applicator) error {
	var slice []*Business
	var object *Business

	if singular {
		object = maybeBusiness.(*Business)
	} else {
		slice = *maybeBusiness.(*[]*Business)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`business_stack`),
		qm.WhereIn(`business_stack.business_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load business_stack")
	}

	var resultSlice []*BusinessStack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice business_stack")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on business_stack")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for business_stack")
	}

	if len(businessStackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessStacks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &businessStackR{}
			}
			foreign.R.Business = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BusinessID {
				local.R.BusinessStacks = append(local.R.BusinessStacks, foreign)
				if foreign.R == nil {
					foreign.R = &businessStackR{}
				}
				foreign.R.Business = local
				break
			}
		}
	}

	return nil
}

// AddBusinessStacksG adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.BusinessStacks.
// Sets related.R.Business appropriately.
// Uses the global database handle.
func (o *Business) AddBusinessStacksG(insert bool, related ...*BusinessStack) error {
	return o.AddBusinessStacks(boil.GetDB(), insert, related...)
}

// AddBusinessStacks adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.BusinessStacks.
// Sets related.R.Business appropriately.
func (o *Business) AddBusinessStacks(exec boil.Executor, insert bool, related ...*BusinessStack) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `business_stack` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"business_id"}),
				strmangle.WhereClause("`", "`", 0, businessStackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessID = o.ID
		}
	}

	if o.R == nil {
		o.R = &businessR{
			BusinessStacks: related,
		}
	} else {
		o.R.BusinessStacks = append(o.R.BusinessStacks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &businessStackR{
				Business: o,
			}
		} else {
			rel.R.Business = o
		}
	}
	return nil
}

// Businesses retrieves all the records using an executor.
func Businesses(mods ...qm.QueryMod) businessQuery {
	mods = append(mods, qm.From("`business`"))
	return businessQuery{NewQuery(mods...)}
}

// FindBusinessG retrieves a single record by ID.
func FindBusinessG(iD uint64, selectCols ...string) (*Business, error) {
	return FindBusiness(boil.GetDB(), iD, selectCols...)
}

// FindBusiness retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusiness(exec boil.Executor, iD uint64, selectCols ...string) (*Business, error) {
	businessObj := &Business{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `business` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, businessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from business")
	}

	return businessObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Business) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Business) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no business provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	businessInsertCacheMut.RLock()
	cache, cached := businessInsertCache[key]
	businessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			businessAllColumns,
			businessColumnsWithDefault,
			businessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(businessType, businessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `business` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `business` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `business` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, businessPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into business")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == businessMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for business")
	}

CacheNoHooks:
	if !cached {
		businessInsertCacheMut.Lock()
		businessInsertCache[key] = cache
		businessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Business record using the global executor.
// See Update for more documentation.
func (o *Business) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Business.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Business) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	businessUpdateCacheMut.RLock()
	cache, cached := businessUpdateCache[key]
	businessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update business, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `business` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, businessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, append(wl, businessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update business row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for business")
	}

	if !cached {
		businessUpdateCacheMut.Lock()
		businessUpdateCache[key] = cache
		businessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q businessQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q businessQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for business")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for business")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BusinessSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusinessSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `business` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in business slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all business")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Business) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLBusinessUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Business) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no business provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBusinessUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	businessUpsertCacheMut.RLock()
	cache, cached := businessUpsertCache[key]
	businessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			businessAllColumns,
			businessColumnsWithDefault,
			businessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert business, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`business`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `business` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(businessType, businessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for business")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == businessMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(businessType, businessMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for business")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for business")
	}

CacheNoHooks:
	if !cached {
		businessUpsertCacheMut.Lock()
		businessUpsertCache[key] = cache
		businessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Business record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Business) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Business record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Business) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Business provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), businessPrimaryKeyMapping)
	sql := "DELETE FROM `business` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from business")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for business")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q businessQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q businessQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no businessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from business")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for business")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BusinessSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusinessSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(businessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `business` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from business slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for business")
	}

	if len(businessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Business) ReloadG() error {
	if o == nil {
		return errors.New("models: no Business provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Business) Reload(exec boil.Executor) error {
	ret, err := FindBusiness(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BusinessSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusinessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `business`.* FROM `business` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusinessSlice")
	}

	*o = slice

	return nil
}

// BusinessExistsG checks if the Business row exists.
func BusinessExistsG(iD uint64) (bool, error) {
	return BusinessExists(boil.GetDB(), iD)
}

// BusinessExists checks if the Business row exists.
func BusinessExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `business` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if business exists")
	}

	return exists, nil
}
