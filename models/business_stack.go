// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusinessStack is an object representing the database table.
type BusinessStack struct {
	ID         uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	BusinessID uint64    `boil:"business_id" json:"business_id" toml:"business_id" yaml:"business_id"`
	StackID    uint64    `boil:"stack_id" json:"stack_id" toml:"stack_id" yaml:"stack_id"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *businessStackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L businessStackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusinessStackColumns = struct {
	ID         string
	BusinessID string
	StackID    string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	BusinessID: "business_id",
	StackID:    "stack_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusinessStackWhere = struct {
	ID         whereHelperuint64
	BusinessID whereHelperuint64
	StackID    whereHelperuint64
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperuint64{field: "`business_stack`.`id`"},
	BusinessID: whereHelperuint64{field: "`business_stack`.`business_id`"},
	StackID:    whereHelperuint64{field: "`business_stack`.`stack_id`"},
	CreatedAt:  whereHelpernull_Time{field: "`business_stack`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`business_stack`.`updated_at`"},
}

// BusinessStackRels is where relationship names are stored.
var BusinessStackRels = struct {
	Business string
	Stack    string
}{
	Business: "Business",
	Stack:    "Stack",
}

// businessStackR is where relationships are stored.
type businessStackR struct {
	Business *Business `boil:"Business" json:"Business" toml:"Business" yaml:"Business"`
	Stack    *Stack    `boil:"Stack" json:"Stack" toml:"Stack" yaml:"Stack"`
}

// NewStruct creates a new relationship struct
func (*businessStackR) NewStruct() *businessStackR {
	return &businessStackR{}
}

// businessStackL is where Load methods for each relationship are stored.
type businessStackL struct{}

var (
	businessStackAllColumns            = []string{"id", "business_id", "stack_id", "created_at", "updated_at"}
	businessStackColumnsWithoutDefault = []string{"business_id", "stack_id", "created_at", "updated_at"}
	businessStackColumnsWithDefault    = []string{"id"}
	businessStackPrimaryKeyColumns     = []string{"id"}
)

type (
	// BusinessStackSlice is an alias for a slice of pointers to BusinessStack.
	// This should generally be used opposed to []BusinessStack.
	BusinessStackSlice []*BusinessStack
	// BusinessStackHook is the signature for custom BusinessStack hook methods
	BusinessStackHook func(boil.Executor, *BusinessStack) error

	businessStackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	businessStackType                 = reflect.TypeOf(&BusinessStack{})
	businessStackMapping              = queries.MakeStructMapping(businessStackType)
	businessStackPrimaryKeyMapping, _ = queries.BindMapping(businessStackType, businessStackMapping, businessStackPrimaryKeyColumns)
	businessStackInsertCacheMut       sync.RWMutex
	businessStackInsertCache          = make(map[string]insertCache)
	businessStackUpdateCacheMut       sync.RWMutex
	businessStackUpdateCache          = make(map[string]updateCache)
	businessStackUpsertCacheMut       sync.RWMutex
	businessStackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var businessStackBeforeInsertHooks []BusinessStackHook
var businessStackBeforeUpdateHooks []BusinessStackHook
var businessStackBeforeDeleteHooks []BusinessStackHook
var businessStackBeforeUpsertHooks []BusinessStackHook

var businessStackAfterInsertHooks []BusinessStackHook
var businessStackAfterSelectHooks []BusinessStackHook
var businessStackAfterUpdateHooks []BusinessStackHook
var businessStackAfterDeleteHooks []BusinessStackHook
var businessStackAfterUpsertHooks []BusinessStackHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BusinessStack) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BusinessStack) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BusinessStack) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BusinessStack) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BusinessStack) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BusinessStack) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BusinessStack) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BusinessStack) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BusinessStack) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessStackAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusinessStackHook registers your hook function for all future operations.
func AddBusinessStackHook(hookPoint boil.HookPoint, businessStackHook BusinessStackHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		businessStackBeforeInsertHooks = append(businessStackBeforeInsertHooks, businessStackHook)
	case boil.BeforeUpdateHook:
		businessStackBeforeUpdateHooks = append(businessStackBeforeUpdateHooks, businessStackHook)
	case boil.BeforeDeleteHook:
		businessStackBeforeDeleteHooks = append(businessStackBeforeDeleteHooks, businessStackHook)
	case boil.BeforeUpsertHook:
		businessStackBeforeUpsertHooks = append(businessStackBeforeUpsertHooks, businessStackHook)
	case boil.AfterInsertHook:
		businessStackAfterInsertHooks = append(businessStackAfterInsertHooks, businessStackHook)
	case boil.AfterSelectHook:
		businessStackAfterSelectHooks = append(businessStackAfterSelectHooks, businessStackHook)
	case boil.AfterUpdateHook:
		businessStackAfterUpdateHooks = append(businessStackAfterUpdateHooks, businessStackHook)
	case boil.AfterDeleteHook:
		businessStackAfterDeleteHooks = append(businessStackAfterDeleteHooks, businessStackHook)
	case boil.AfterUpsertHook:
		businessStackAfterUpsertHooks = append(businessStackAfterUpsertHooks, businessStackHook)
	}
}

// OneG returns a single businessStack record from the query using the global executor.
func (q businessStackQuery) OneG() (*BusinessStack, error) {
	return q.One(boil.GetDB())
}

// One returns a single businessStack record from the query.
func (q businessStackQuery) One(exec boil.Executor) (*BusinessStack, error) {
	o := &BusinessStack{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for business_stack")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BusinessStack records from the query using the global executor.
func (q businessStackQuery) AllG() (BusinessStackSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all BusinessStack records from the query.
func (q businessStackQuery) All(exec boil.Executor) (BusinessStackSlice, error) {
	var o []*BusinessStack

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BusinessStack slice")
	}

	if len(businessStackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BusinessStack records in the query, and panics on error.
func (q businessStackQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all BusinessStack records in the query.
func (q businessStackQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count business_stack rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q businessStackQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q businessStackQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if business_stack exists")
	}

	return count > 0, nil
}

// Business pointed to by the foreign key.
func (o *BusinessStack) Business(mods ...qm.QueryMod) businessQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BusinessID),
	}

	queryMods = append(queryMods, mods...)

	query := Businesses(queryMods...)
	queries.SetFrom(query.Query, "`businesses`")

	return query
}

// Stack pointed to by the foreign key.
func (o *BusinessStack) Stack(mods ...qm.QueryMod) stackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.StackID),
	}

	queryMods = append(queryMods, mods...)

	query := Stacks(queryMods...)
	queries.SetFrom(query.Query, "`stacks`")

	return query
}

// LoadBusiness allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (businessStackL) LoadBusiness(e boil.Executor, singular bool, maybeBusinessStack interface{}, mods queries.Applicator) error {
	var slice []*BusinessStack
	var object *BusinessStack

	if singular {
		object = maybeBusinessStack.(*BusinessStack)
	} else {
		slice = *maybeBusinessStack.(*[]*BusinessStack)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessStackR{}
		}
		args = append(args, object.BusinessID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessStackR{}
			}

			for _, a := range args {
				if a == obj.BusinessID {
					continue Outer
				}
			}

			args = append(args, obj.BusinessID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`businesses`),
		qm.WhereIn(`businesses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Business")
	}

	var resultSlice []*Business
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Business")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for businesses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for businesses")
	}

	if len(businessStackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Business = foreign
		if foreign.R == nil {
			foreign.R = &businessR{}
		}
		foreign.R.BusinessStacks = append(foreign.R.BusinessStacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessID == foreign.ID {
				local.R.Business = foreign
				if foreign.R == nil {
					foreign.R = &businessR{}
				}
				foreign.R.BusinessStacks = append(foreign.R.BusinessStacks, local)
				break
			}
		}
	}

	return nil
}

// LoadStack allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (businessStackL) LoadStack(e boil.Executor, singular bool, maybeBusinessStack interface{}, mods queries.Applicator) error {
	var slice []*BusinessStack
	var object *BusinessStack

	if singular {
		object = maybeBusinessStack.(*BusinessStack)
	} else {
		slice = *maybeBusinessStack.(*[]*BusinessStack)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessStackR{}
		}
		args = append(args, object.StackID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessStackR{}
			}

			for _, a := range args {
				if a == obj.StackID {
					continue Outer
				}
			}

			args = append(args, obj.StackID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stacks`),
		qm.WhereIn(`stacks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Stack")
	}

	var resultSlice []*Stack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Stack")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stacks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stacks")
	}

	if len(businessStackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Stack = foreign
		if foreign.R == nil {
			foreign.R = &stackR{}
		}
		foreign.R.BusinessStacks = append(foreign.R.BusinessStacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StackID == foreign.ID {
				local.R.Stack = foreign
				if foreign.R == nil {
					foreign.R = &stackR{}
				}
				foreign.R.BusinessStacks = append(foreign.R.BusinessStacks, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessG of the businessStack to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.BusinessStacks.
// Uses the global database handle.
func (o *BusinessStack) SetBusinessG(insert bool, related *Business) error {
	return o.SetBusiness(boil.GetDB(), insert, related)
}

// SetBusiness of the businessStack to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.BusinessStacks.
func (o *BusinessStack) SetBusiness(exec boil.Executor, insert bool, related *Business) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `business_stack` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"business_id"}),
		strmangle.WhereClause("`", "`", 0, businessStackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessID = related.ID
	if o.R == nil {
		o.R = &businessStackR{
			Business: related,
		}
	} else {
		o.R.Business = related
	}

	if related.R == nil {
		related.R = &businessR{
			BusinessStacks: BusinessStackSlice{o},
		}
	} else {
		related.R.BusinessStacks = append(related.R.BusinessStacks, o)
	}

	return nil
}

// SetStackG of the businessStack to the related item.
// Sets o.R.Stack to related.
// Adds o to related.R.BusinessStacks.
// Uses the global database handle.
func (o *BusinessStack) SetStackG(insert bool, related *Stack) error {
	return o.SetStack(boil.GetDB(), insert, related)
}

// SetStack of the businessStack to the related item.
// Sets o.R.Stack to related.
// Adds o to related.R.BusinessStacks.
func (o *BusinessStack) SetStack(exec boil.Executor, insert bool, related *Stack) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `business_stack` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"stack_id"}),
		strmangle.WhereClause("`", "`", 0, businessStackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StackID = related.ID
	if o.R == nil {
		o.R = &businessStackR{
			Stack: related,
		}
	} else {
		o.R.Stack = related
	}

	if related.R == nil {
		related.R = &stackR{
			BusinessStacks: BusinessStackSlice{o},
		}
	} else {
		related.R.BusinessStacks = append(related.R.BusinessStacks, o)
	}

	return nil
}

// BusinessStacks retrieves all the records using an executor.
func BusinessStacks(mods ...qm.QueryMod) businessStackQuery {
	mods = append(mods, qm.From("`business_stack`"))
	return businessStackQuery{NewQuery(mods...)}
}

// FindBusinessStackG retrieves a single record by ID.
func FindBusinessStackG(iD uint64, selectCols ...string) (*BusinessStack, error) {
	return FindBusinessStack(boil.GetDB(), iD, selectCols...)
}

// FindBusinessStack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusinessStack(exec boil.Executor, iD uint64, selectCols ...string) (*BusinessStack, error) {
	businessStackObj := &BusinessStack{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `business_stack` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, businessStackObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from business_stack")
	}

	return businessStackObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BusinessStack) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusinessStack) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no business_stack provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessStackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	businessStackInsertCacheMut.RLock()
	cache, cached := businessStackInsertCache[key]
	businessStackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			businessStackAllColumns,
			businessStackColumnsWithDefault,
			businessStackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(businessStackType, businessStackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(businessStackType, businessStackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `business_stack` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `business_stack` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `business_stack` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, businessStackPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into business_stack")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == businessStackMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for business_stack")
	}

CacheNoHooks:
	if !cached {
		businessStackInsertCacheMut.Lock()
		businessStackInsertCache[key] = cache
		businessStackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single BusinessStack record using the global executor.
// See Update for more documentation.
func (o *BusinessStack) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the BusinessStack.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusinessStack) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	businessStackUpdateCacheMut.RLock()
	cache, cached := businessStackUpdateCache[key]
	businessStackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			businessStackAllColumns,
			businessStackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update business_stack, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `business_stack` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, businessStackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(businessStackType, businessStackMapping, append(wl, businessStackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update business_stack row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for business_stack")
	}

	if !cached {
		businessStackUpdateCacheMut.Lock()
		businessStackUpdateCache[key] = cache
		businessStackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q businessStackQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q businessStackQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for business_stack")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for business_stack")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BusinessStackSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusinessStackSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessStackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `business_stack` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessStackPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in businessStack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all businessStack")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BusinessStack) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLBusinessStackUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusinessStack) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no business_stack provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessStackColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBusinessStackUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	businessStackUpsertCacheMut.RLock()
	cache, cached := businessStackUpsertCache[key]
	businessStackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			businessStackAllColumns,
			businessStackColumnsWithDefault,
			businessStackColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			businessStackAllColumns,
			businessStackPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert business_stack, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`business_stack`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `business_stack` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(businessStackType, businessStackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(businessStackType, businessStackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for business_stack")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == businessStackMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(businessStackType, businessStackMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for business_stack")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for business_stack")
	}

CacheNoHooks:
	if !cached {
		businessStackUpsertCacheMut.Lock()
		businessStackUpsertCache[key] = cache
		businessStackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single BusinessStack record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BusinessStack) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single BusinessStack record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusinessStack) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusinessStack provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), businessStackPrimaryKeyMapping)
	sql := "DELETE FROM `business_stack` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from business_stack")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for business_stack")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q businessStackQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q businessStackQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no businessStackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from business_stack")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for business_stack")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BusinessStackSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusinessStackSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(businessStackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessStackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `business_stack` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessStackPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from businessStack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for business_stack")
	}

	if len(businessStackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BusinessStack) ReloadG() error {
	if o == nil {
		return errors.New("models: no BusinessStack provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusinessStack) Reload(exec boil.Executor) error {
	ret, err := FindBusinessStack(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessStackSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BusinessStackSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessStackSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusinessStackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessStackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `business_stack`.* FROM `business_stack` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, businessStackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusinessStackSlice")
	}

	*o = slice

	return nil
}

// BusinessStackExistsG checks if the BusinessStack row exists.
func BusinessStackExistsG(iD uint64) (bool, error) {
	return BusinessStackExists(boil.GetDB(), iD)
}

// BusinessStackExists checks if the BusinessStack row exists.
func BusinessStackExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `business_stack` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if business_stack exists")
	}

	return exists, nil
}
