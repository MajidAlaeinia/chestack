// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PasswordReset is an object representing the database table.
type PasswordReset struct {
	ID        uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Token     string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *passwordResetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L passwordResetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PasswordResetColumns = struct {
	ID        string
	Email     string
	Token     string
	CreatedAt string
}{
	ID:        "id",
	Email:     "email",
	Token:     "token",
	CreatedAt: "created_at",
}

// Generated where

var PasswordResetWhere = struct {
	ID        whereHelperuint64
	Email     whereHelperstring
	Token     whereHelperstring
	CreatedAt whereHelpernull_Time
}{
	ID:        whereHelperuint64{field: "`password_reset`.`id`"},
	Email:     whereHelperstring{field: "`password_reset`.`email`"},
	Token:     whereHelperstring{field: "`password_reset`.`token`"},
	CreatedAt: whereHelpernull_Time{field: "`password_reset`.`created_at`"},
}

// PasswordResetRels is where relationship names are stored.
var PasswordResetRels = struct {
}{}

// passwordResetR is where relationships are stored.
type passwordResetR struct {
}

// NewStruct creates a new relationship struct
func (*passwordResetR) NewStruct() *passwordResetR {
	return &passwordResetR{}
}

// passwordResetL is where Load methods for each relationship are stored.
type passwordResetL struct{}

var (
	passwordResetAllColumns            = []string{"id", "email", "token", "created_at"}
	passwordResetColumnsWithoutDefault = []string{"email", "token", "created_at"}
	passwordResetColumnsWithDefault    = []string{"id"}
	passwordResetPrimaryKeyColumns     = []string{"id"}
)

type (
	// PasswordResetSlice is an alias for a slice of pointers to PasswordReset.
	// This should generally be used opposed to []PasswordReset.
	PasswordResetSlice []*PasswordReset
	// PasswordResetHook is the signature for custom PasswordReset hook methods
	PasswordResetHook func(boil.Executor, *PasswordReset) error

	passwordResetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	passwordResetType                 = reflect.TypeOf(&PasswordReset{})
	passwordResetMapping              = queries.MakeStructMapping(passwordResetType)
	passwordResetPrimaryKeyMapping, _ = queries.BindMapping(passwordResetType, passwordResetMapping, passwordResetPrimaryKeyColumns)
	passwordResetInsertCacheMut       sync.RWMutex
	passwordResetInsertCache          = make(map[string]insertCache)
	passwordResetUpdateCacheMut       sync.RWMutex
	passwordResetUpdateCache          = make(map[string]updateCache)
	passwordResetUpsertCacheMut       sync.RWMutex
	passwordResetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var passwordResetBeforeInsertHooks []PasswordResetHook
var passwordResetBeforeUpdateHooks []PasswordResetHook
var passwordResetBeforeDeleteHooks []PasswordResetHook
var passwordResetBeforeUpsertHooks []PasswordResetHook

var passwordResetAfterInsertHooks []PasswordResetHook
var passwordResetAfterSelectHooks []PasswordResetHook
var passwordResetAfterUpdateHooks []PasswordResetHook
var passwordResetAfterDeleteHooks []PasswordResetHook
var passwordResetAfterUpsertHooks []PasswordResetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PasswordReset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PasswordReset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PasswordReset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PasswordReset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PasswordReset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PasswordReset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PasswordReset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PasswordReset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PasswordReset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range passwordResetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPasswordResetHook registers your hook function for all future operations.
func AddPasswordResetHook(hookPoint boil.HookPoint, passwordResetHook PasswordResetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		passwordResetBeforeInsertHooks = append(passwordResetBeforeInsertHooks, passwordResetHook)
	case boil.BeforeUpdateHook:
		passwordResetBeforeUpdateHooks = append(passwordResetBeforeUpdateHooks, passwordResetHook)
	case boil.BeforeDeleteHook:
		passwordResetBeforeDeleteHooks = append(passwordResetBeforeDeleteHooks, passwordResetHook)
	case boil.BeforeUpsertHook:
		passwordResetBeforeUpsertHooks = append(passwordResetBeforeUpsertHooks, passwordResetHook)
	case boil.AfterInsertHook:
		passwordResetAfterInsertHooks = append(passwordResetAfterInsertHooks, passwordResetHook)
	case boil.AfterSelectHook:
		passwordResetAfterSelectHooks = append(passwordResetAfterSelectHooks, passwordResetHook)
	case boil.AfterUpdateHook:
		passwordResetAfterUpdateHooks = append(passwordResetAfterUpdateHooks, passwordResetHook)
	case boil.AfterDeleteHook:
		passwordResetAfterDeleteHooks = append(passwordResetAfterDeleteHooks, passwordResetHook)
	case boil.AfterUpsertHook:
		passwordResetAfterUpsertHooks = append(passwordResetAfterUpsertHooks, passwordResetHook)
	}
}

// OneG returns a single passwordReset record from the query using the global executor.
func (q passwordResetQuery) OneG() (*PasswordReset, error) {
	return q.One(boil.GetDB())
}

// One returns a single passwordReset record from the query.
func (q passwordResetQuery) One(exec boil.Executor) (*PasswordReset, error) {
	o := &PasswordReset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for password_reset")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PasswordReset records from the query using the global executor.
func (q passwordResetQuery) AllG() (PasswordResetSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all PasswordReset records from the query.
func (q passwordResetQuery) All(exec boil.Executor) (PasswordResetSlice, error) {
	var o []*PasswordReset

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PasswordReset slice")
	}

	if len(passwordResetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PasswordReset records in the query, and panics on error.
func (q passwordResetQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all PasswordReset records in the query.
func (q passwordResetQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count password_reset rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q passwordResetQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q passwordResetQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if password_reset exists")
	}

	return count > 0, nil
}

// PasswordResets retrieves all the records using an executor.
func PasswordResets(mods ...qm.QueryMod) passwordResetQuery {
	mods = append(mods, qm.From("`password_reset`"))
	return passwordResetQuery{NewQuery(mods...)}
}

// FindPasswordResetG retrieves a single record by ID.
func FindPasswordResetG(iD uint64, selectCols ...string) (*PasswordReset, error) {
	return FindPasswordReset(boil.GetDB(), iD, selectCols...)
}

// FindPasswordReset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPasswordReset(exec boil.Executor, iD uint64, selectCols ...string) (*PasswordReset, error) {
	passwordResetObj := &PasswordReset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `password_reset` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, passwordResetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from password_reset")
	}

	return passwordResetObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PasswordReset) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PasswordReset) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no password_reset provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(passwordResetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	passwordResetInsertCacheMut.RLock()
	cache, cached := passwordResetInsertCache[key]
	passwordResetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			passwordResetAllColumns,
			passwordResetColumnsWithDefault,
			passwordResetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(passwordResetType, passwordResetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(passwordResetType, passwordResetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `password_reset` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `password_reset` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `password_reset` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, passwordResetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into password_reset")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == passwordResetMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for password_reset")
	}

CacheNoHooks:
	if !cached {
		passwordResetInsertCacheMut.Lock()
		passwordResetInsertCache[key] = cache
		passwordResetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single PasswordReset record using the global executor.
// See Update for more documentation.
func (o *PasswordReset) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the PasswordReset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PasswordReset) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	passwordResetUpdateCacheMut.RLock()
	cache, cached := passwordResetUpdateCache[key]
	passwordResetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			passwordResetAllColumns,
			passwordResetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update password_reset, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `password_reset` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, passwordResetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(passwordResetType, passwordResetMapping, append(wl, passwordResetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update password_reset row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for password_reset")
	}

	if !cached {
		passwordResetUpdateCacheMut.Lock()
		passwordResetUpdateCache[key] = cache
		passwordResetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q passwordResetQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q passwordResetQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for password_reset")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for password_reset")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PasswordResetSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PasswordResetSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passwordResetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `password_reset` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, passwordResetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in passwordReset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all passwordReset")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PasswordReset) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLPasswordResetUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PasswordReset) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no password_reset provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(passwordResetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPasswordResetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	passwordResetUpsertCacheMut.RLock()
	cache, cached := passwordResetUpsertCache[key]
	passwordResetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			passwordResetAllColumns,
			passwordResetColumnsWithDefault,
			passwordResetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			passwordResetAllColumns,
			passwordResetPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert password_reset, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`password_reset`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `password_reset` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(passwordResetType, passwordResetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(passwordResetType, passwordResetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for password_reset")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == passwordResetMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(passwordResetType, passwordResetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for password_reset")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for password_reset")
	}

CacheNoHooks:
	if !cached {
		passwordResetUpsertCacheMut.Lock()
		passwordResetUpsertCache[key] = cache
		passwordResetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single PasswordReset record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PasswordReset) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single PasswordReset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PasswordReset) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PasswordReset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), passwordResetPrimaryKeyMapping)
	sql := "DELETE FROM `password_reset` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from password_reset")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for password_reset")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q passwordResetQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q passwordResetQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no passwordResetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from password_reset")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for password_reset")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PasswordResetSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PasswordResetSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(passwordResetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passwordResetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `password_reset` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, passwordResetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from passwordReset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for password_reset")
	}

	if len(passwordResetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PasswordReset) ReloadG() error {
	if o == nil {
		return errors.New("models: no PasswordReset provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PasswordReset) Reload(exec boil.Executor) error {
	ret, err := FindPasswordReset(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PasswordResetSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PasswordResetSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PasswordResetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PasswordResetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passwordResetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `password_reset`.* FROM `password_reset` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, passwordResetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PasswordResetSlice")
	}

	*o = slice

	return nil
}

// PasswordResetExistsG checks if the PasswordReset row exists.
func PasswordResetExistsG(iD uint64) (bool, error) {
	return PasswordResetExists(boil.GetDB(), iD)
}

// PasswordResetExists checks if the PasswordReset row exists.
func PasswordResetExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `password_reset` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if password_reset exists")
	}

	return exists, nil
}
